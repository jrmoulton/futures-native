name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo +nightly fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-clippy-
            ${{ runner.os }}-cargo-build-
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce matrix size - only test stable and nightly on all platforms
          - os: windows-latest
            rust: beta
          - os: ubuntu-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
            ${{ runner.os }}-cargo-build-
      
      - name: Run tests
        run: cargo test --all-features --workspace
      
      - name: Run doc tests
        run: cargo test --doc --workspace

  # Optional: Check specific crates only when their files change
  changed-files:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      blockon: ${{ steps.changes.outputs.blockon }}
      request-native: ${{ steps.changes.outputs.request-native }}
      schedule-native: ${{ steps.changes.outputs.schedule-native }}
      time-native: ${{ steps.changes.outputs.time-native }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            blockon:
              - 'blockon/**'
            request-native:
              - 'request-native/**'
            schedule-native:
              - 'schedule-native/**'
            time-native:
              - 'time-native/**'

  # Test individual crates when only they change (optimization)
  test-blockon:
    name: Test blockon
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.blockon == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Test blockon only
        run: cargo test -p blockon

  test-request-native:
    name: Test request-native
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.request-native == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Test request-native only
        run: cargo test -p request-native

  test-schedule-native:
    name: Test schedule-native
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.schedule-native == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Test schedule-native only
        run: cargo test -p schedule-native

  test-time-native:
    name: Test time-native
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.time-native == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Test time-native only
        run: cargo test -p time-native

  # Ensure all checks pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [format, clippy, test]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.format.result }}" != "success" ]]; then
            echo "Format check failed"
            exit 1
          fi
          if [[ "${{ needs.clippy.result }}" != "success" ]]; then
            echo "Clippy check failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          echo "All CI checks passed!"